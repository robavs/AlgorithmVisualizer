(()=>{"use strict";var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};function e(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}function n(t,e){var n,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(c){return function(s){return function(c){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,c[0]&&(u=0)),u;)try{if(n=1,r&&(o=2&c[0]?r.return:c[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,c[1])).done)return o;switch(r=0,o&&(c=[2&c[0],o.value]),c[0]){case 0:case 1:o=c;break;case 4:return u.label++,{value:c[1],done:!1};case 5:u.label++,r=c[1],c=[0];continue;case 7:c=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==c[0]&&2!==c[0])){u=0;continue}if(3===c[0]&&(!o||c[1]>o[0]&&c[1]<o[3])){u.label=c[1];break}if(6===c[0]&&u.label<o[1]){u.label=o[1],o=c;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(c);break}o[2]&&u.ops.pop(),u.trys.pop();continue}c=e.call(t,u)}catch(t){c=[6,t],r=0}finally{n=o=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,s])}}}function r(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function o(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,o,i=n.call(t),u=[];try{for(;(void 0===e||e-- >0)&&!(r=i.next()).done;)u.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return u}function i(t,e,n){if(n||2===arguments.length)for(var r,o=0,i=e.length;o<i;o++)!r&&o in e||(r||(r=Array.prototype.slice.call(e,0,o)),r[o]=e[o]);return t.concat(r||Array.prototype.slice.call(e))}function u(t){return this instanceof u?(this.v=t,this):new u(t)}function c(t){return"function"==typeof t}function s(t){var e=t((function(t){Error.call(t),t.stack=(new Error).stack}));return e.prototype=Object.create(Error.prototype),e.prototype.constructor=e,e}Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError;var l=s((function(t){return function(e){t(this),this.message=e?e.length+" errors occurred during unsubscription:\n"+e.map((function(t,e){return e+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=e}}));function a(t,e){if(t){var n=t.indexOf(e);0<=n&&t.splice(n,1)}}var f=function(){function t(t){this.initialTeardown=t,this.closed=!1,this._parentage=null,this._finalizers=null}var e;return t.prototype.unsubscribe=function(){var t,e,n,u,s;if(!this.closed){this.closed=!0;var a=this._parentage;if(a)if(this._parentage=null,Array.isArray(a))try{for(var f=r(a),d=f.next();!d.done;d=f.next())d.value.remove(this)}catch(e){t={error:e}}finally{try{d&&!d.done&&(e=f.return)&&e.call(f)}finally{if(t)throw t.error}}else a.remove(this);var h=this.initialTeardown;if(c(h))try{h()}catch(t){s=t instanceof l?t.errors:[t]}var v=this._finalizers;if(v){this._finalizers=null;try{for(var b=r(v),y=b.next();!y.done;y=b.next()){var m=y.value;try{p(m)}catch(t){s=null!=s?s:[],t instanceof l?s=i(i([],o(s)),o(t.errors)):s.push(t)}}}catch(t){n={error:t}}finally{try{y&&!y.done&&(u=b.return)&&u.call(b)}finally{if(n)throw n.error}}}if(s)throw new l(s)}},t.prototype.add=function(e){var n;if(e&&e!==this)if(this.closed)p(e);else{if(e instanceof t){if(e.closed||e._hasParent(this))return;e._addParent(this)}(this._finalizers=null!==(n=this._finalizers)&&void 0!==n?n:[]).push(e)}},t.prototype._hasParent=function(t){var e=this._parentage;return e===t||Array.isArray(e)&&e.includes(t)},t.prototype._addParent=function(t){var e=this._parentage;this._parentage=Array.isArray(e)?(e.push(t),e):e?[e,t]:t},t.prototype._removeParent=function(t){var e=this._parentage;e===t?this._parentage=null:Array.isArray(e)&&a(e,t)},t.prototype.remove=function(e){var n=this._finalizers;n&&a(n,e),e instanceof t&&e._removeParent(this)},t.EMPTY=((e=new t).closed=!0,e),t}(),d=f.EMPTY;function h(t){return t instanceof f||t&&"closed"in t&&c(t.remove)&&c(t.add)&&c(t.unsubscribe)}function p(t){c(t)?t():t.unsubscribe()}var v={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},b={setTimeout:function(t,e){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var u=b.delegate;return(null==u?void 0:u.setTimeout)?u.setTimeout.apply(u,i([t,e],o(n))):setTimeout.apply(void 0,i([t,e],o(n)))},clearTimeout:function(t){var e=b.delegate;return((null==e?void 0:e.clearTimeout)||clearTimeout)(t)},delegate:void 0};function y(t){b.setTimeout((function(){var e=v.onUnhandledError;if(!e)throw t;e(t)}))}function m(){}var w=x("C",void 0,void 0);function x(t,e,n){return{kind:t,value:e,error:n}}var g=null;function S(t){if(v.useDeprecatedSynchronousErrorHandling){var e=!g;if(e&&(g={errorThrown:!1,error:null}),t(),e){var n=g,r=n.errorThrown,o=n.error;if(g=null,r)throw o}}else t()}var _=function(t){function n(e){var n=t.call(this)||this;return n.isStopped=!1,e?(n.destination=e,h(e)&&e.add(n)):n.destination=k,n}return e(n,t),n.create=function(t,e,n){return new I(t,e,n)},n.prototype.next=function(t){this.isStopped?T(function(t){return x("N",t,void 0)}(t),this):this._next(t)},n.prototype.error=function(t){this.isStopped?T(x("E",void 0,t),this):(this.isStopped=!0,this._error(t))},n.prototype.complete=function(){this.isStopped?T(w,this):(this.isStopped=!0,this._complete())},n.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this),this.destination=null)},n.prototype._next=function(t){this.destination.next(t)},n.prototype._error=function(t){try{this.destination.error(t)}finally{this.unsubscribe()}},n.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},n}(f),E=Function.prototype.bind;function C(t,e){return E.call(t,e)}var A=function(){function t(t){this.partialObserver=t}return t.prototype.next=function(t){var e=this.partialObserver;if(e.next)try{e.next(t)}catch(t){O(t)}},t.prototype.error=function(t){var e=this.partialObserver;if(e.error)try{e.error(t)}catch(t){O(t)}else O(t)},t.prototype.complete=function(){var t=this.partialObserver;if(t.complete)try{t.complete()}catch(t){O(t)}},t}(),I=function(t){function n(e,n,r){var o,i,u=t.call(this)||this;return c(e)||!e?o={next:null!=e?e:void 0,error:null!=n?n:void 0,complete:null!=r?r:void 0}:u&&v.useDeprecatedNextContext?((i=Object.create(e)).unsubscribe=function(){return u.unsubscribe()},o={next:e.next&&C(e.next,i),error:e.error&&C(e.error,i),complete:e.complete&&C(e.complete,i)}):o=e,u.destination=new A(o),u}return e(n,t),n}(_);function O(t){var e;v.useDeprecatedSynchronousErrorHandling?(e=t,v.useDeprecatedSynchronousErrorHandling&&g&&(g.errorThrown=!0,g.error=e)):y(t)}function T(t,e){var n=v.onStoppedNotification;n&&b.setTimeout((function(){return n(t,e)}))}var k={closed:!0,next:m,error:function(t){throw t},complete:m},L="function"==typeof Symbol&&Symbol.observable||"@@observable";function P(t){return t}var j=function(){function t(t){t&&(this._subscribe=t)}return t.prototype.lift=function(e){var n=new t;return n.source=this,n.operator=e,n},t.prototype.subscribe=function(t,e,n){var r,o=this,i=(r=t)&&r instanceof _||function(t){return t&&c(t.next)&&c(t.error)&&c(t.complete)}(r)&&h(r)?t:new I(t,e,n);return S((function(){var t=o,e=t.operator,n=t.source;i.add(e?e.call(i,n):n?o._subscribe(i):o._trySubscribe(i))})),i},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(e){t.error(e)}},t.prototype.forEach=function(t,e){var n=this;return new(e=N(e))((function(e,r){var o=new I({next:function(e){try{t(e)}catch(t){r(t),o.unsubscribe()}},error:r,complete:e});n.subscribe(o)}))},t.prototype._subscribe=function(t){var e;return null===(e=this.source)||void 0===e?void 0:e.subscribe(t)},t.prototype[L]=function(){return this},t.prototype.pipe=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return(0===(n=t).length?P:1===n.length?n[0]:function(t){return n.reduce((function(t,e){return e(t)}),t)})(this);var n},t.prototype.toPromise=function(t){var e=this;return new(t=N(t))((function(t,n){var r;e.subscribe((function(t){return r=t}),(function(t){return n(t)}),(function(){return t(r)}))}))},t.create=function(e){return new t(e)},t}();function N(t){var e;return null!==(e=null!=t?t:v.Promise)&&void 0!==e?e:Promise}var M=s((function(t){return function(){t(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}})),z=function(t){function n(){var e=t.call(this)||this;return e.closed=!1,e.currentObservers=null,e.observers=[],e.isStopped=!1,e.hasError=!1,e.thrownError=null,e}return e(n,t),n.prototype.lift=function(t){var e=new D(this,this);return e.operator=t,e},n.prototype._throwIfClosed=function(){if(this.closed)throw new M},n.prototype.next=function(t){var e=this;S((function(){var n,o;if(e._throwIfClosed(),!e.isStopped){e.currentObservers||(e.currentObservers=Array.from(e.observers));try{for(var i=r(e.currentObservers),u=i.next();!u.done;u=i.next())u.value.next(t)}catch(t){n={error:t}}finally{try{u&&!u.done&&(o=i.return)&&o.call(i)}finally{if(n)throw n.error}}}}))},n.prototype.error=function(t){var e=this;S((function(){if(e._throwIfClosed(),!e.isStopped){e.hasError=e.isStopped=!0,e.thrownError=t;for(var n=e.observers;n.length;)n.shift().error(t)}}))},n.prototype.complete=function(){var t=this;S((function(){if(t._throwIfClosed(),!t.isStopped){t.isStopped=!0;for(var e=t.observers;e.length;)e.shift().complete()}}))},n.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=this.currentObservers=null},Object.defineProperty(n.prototype,"observed",{get:function(){var t;return(null===(t=this.observers)||void 0===t?void 0:t.length)>0},enumerable:!1,configurable:!0}),n.prototype._trySubscribe=function(e){return this._throwIfClosed(),t.prototype._trySubscribe.call(this,e)},n.prototype._subscribe=function(t){return this._throwIfClosed(),this._checkFinalizedStatuses(t),this._innerSubscribe(t)},n.prototype._innerSubscribe=function(t){var e=this,n=this,r=n.hasError,o=n.isStopped,i=n.observers;return r||o?d:(this.currentObservers=null,i.push(t),new f((function(){e.currentObservers=null,a(i,t)})))},n.prototype._checkFinalizedStatuses=function(t){var e=this,n=e.hasError,r=e.thrownError,o=e.isStopped;n?t.error(r):o&&t.complete()},n.prototype.asObservable=function(){var t=new j;return t.source=this,t},n.create=function(t,e){return new D(t,e)},n}(j),D=function(t){function n(e,n){var r=t.call(this)||this;return r.destination=e,r.source=n,r}return e(n,t),n.prototype.next=function(t){var e,n;null===(n=null===(e=this.destination)||void 0===e?void 0:e.next)||void 0===n||n.call(e,t)},n.prototype.error=function(t){var e,n;null===(n=null===(e=this.destination)||void 0===e?void 0:e.error)||void 0===n||n.call(e,t)},n.prototype.complete=function(){var t,e;null===(e=null===(t=this.destination)||void 0===t?void 0:t.complete)||void 0===e||e.call(t)},n.prototype._subscribe=function(t){var e,n;return null!==(n=null===(e=this.source)||void 0===e?void 0:e.subscribe(t))&&void 0!==n?n:d},n}(z),U=function(t){function n(e){var n=t.call(this)||this;return n._value=e,n}return e(n,t),Object.defineProperty(n.prototype,"value",{get:function(){return this.getValue()},enumerable:!1,configurable:!0}),n.prototype._subscribe=function(e){var n=t.prototype._subscribe.call(this,e);return!n.closed&&e.next(this._value),n},n.prototype.getValue=function(){var t=this,e=t.hasError,n=t.thrownError,r=t._value;if(e)throw n;return this._throwIfClosed(),r},n.prototype.next=function(e){t.prototype.next.call(this,this._value=e)},n}(z),W=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t};function F(t){return c(null==t?void 0:t.then)}function q(t){return c(t[L])}function H(t){return Symbol.asyncIterator&&c(null==t?void 0:t[Symbol.asyncIterator])}function Y(t){return new TypeError("You provided "+(null!==t&&"object"==typeof t?"an invalid object":"'"+t+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var R="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function B(t){return c(null==t?void 0:t[R])}function V(t){return function(t,e,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=n.apply(t,e||[]),i=[];return r={},c("next"),c("throw"),c("return"),r[Symbol.asyncIterator]=function(){return this},r;function c(t){o[t]&&(r[t]=function(e){return new Promise((function(n,r){i.push([t,e,n,r])>1||s(t,e)}))})}function s(t,e){try{(n=o[t](e)).value instanceof u?Promise.resolve(n.value.v).then(l,a):f(i[0][2],n)}catch(t){f(i[0][3],t)}var n}function l(t){s("next",t)}function a(t){s("throw",t)}function f(t,e){t(e),i.shift(),i.length&&s(i[0][0],i[0][1])}}(this,arguments,(function(){var e,r,o;return n(this,(function(n){switch(n.label){case 0:e=t.getReader(),n.label=1;case 1:n.trys.push([1,,9,10]),n.label=2;case 2:return[4,u(e.read())];case 3:return r=n.sent(),o=r.value,r.done?[4,u(void 0)]:[3,5];case 4:return[2,n.sent()];case 5:return[4,u(o)];case 6:return[4,n.sent()];case 7:return n.sent(),[3,2];case 8:return[3,10];case 9:return e.releaseLock(),[7];case 10:return[2]}}))}))}function G(t){return c(null==t?void 0:t.getReader)}function $(t){if(t instanceof j)return t;if(null!=t){if(q(t))return i=t,new j((function(t){var e=i[L]();if(c(e.subscribe))return e.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(W(t))return o=t,new j((function(t){for(var e=0;e<o.length&&!t.closed;e++)t.next(o[e]);t.complete()}));if(F(t))return n=t,new j((function(t){n.then((function(e){t.closed||(t.next(e),t.complete())}),(function(e){return t.error(e)})).then(null,y)}));if(H(t))return J(t);if(B(t))return e=t,new j((function(t){var n,o;try{for(var i=r(e),u=i.next();!u.done;u=i.next()){var c=u.value;if(t.next(c),t.closed)return}}catch(t){n={error:t}}finally{try{u&&!u.done&&(o=i.return)&&o.call(i)}finally{if(n)throw n.error}}t.complete()}));if(G(t))return J(V(t))}var e,n,o,i;throw Y(t)}function J(t){return new j((function(e){(function(t,e){var o,i,u,c,s,l,a,f;return s=this,l=void 0,f=function(){var s,l;return n(this,(function(n){switch(n.label){case 0:n.trys.push([0,5,6,11]),o=function(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,n=t[Symbol.asyncIterator];return n?n.call(t):(t=r(t),e={},o("next"),o("throw"),o("return"),e[Symbol.asyncIterator]=function(){return this},e);function o(n){e[n]=t[n]&&function(e){return new Promise((function(r,o){!function(t,e,n,r){Promise.resolve(r).then((function(e){t({value:e,done:n})}),e)}(r,o,(e=t[n](e)).done,e.value)}))}}}(t),n.label=1;case 1:return[4,o.next()];case 2:if((i=n.sent()).done)return[3,4];if(s=i.value,e.next(s),e.closed)return[2];n.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return l=n.sent(),u={error:l},[3,11];case 6:return n.trys.push([6,,9,10]),i&&!i.done&&(c=o.return)?[4,c.call(o)]:[3,8];case 7:n.sent(),n.label=8;case 8:return[3,10];case 9:if(u)throw u.error;return[7];case 10:return[7];case 11:return e.complete(),[2]}}))},new((a=void 0)||(a=Promise))((function(t,e){function n(t){try{o(f.next(t))}catch(t){e(t)}}function r(t){try{o(f.throw(t))}catch(t){e(t)}}function o(e){var o;e.done?t(e.value):(o=e.value,o instanceof a?o:new a((function(t){t(o)}))).then(n,r)}o((f=f.apply(s,l||[])).next())}))})(t,e).catch((function(t){return e.error(t)}))}))}function K(t){return function(e){if(function(t){return c(null==t?void 0:t.lift)}(e))return e.lift((function(e){try{return t(e,this)}catch(t){this.error(t)}}));throw new TypeError("Unable to lift unknown Observable type")}}function Q(t,e,n,r,o){return new X(t,e,n,r,o)}var X=function(t){function n(e,n,r,o,i,u){var c=t.call(this,e)||this;return c.onFinalize=i,c.shouldUnsubscribe=u,c._next=n?function(t){try{n(t)}catch(t){e.error(t)}}:t.prototype._next,c._error=o?function(t){try{o(t)}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._error,c._complete=r?function(){try{r()}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._complete,c}return e(n,t),n.prototype.unsubscribe=function(){var e;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var n=this.closed;t.prototype.unsubscribe.call(this),!n&&(null===(e=this.onFinalize)||void 0===e||e.call(this))}},n}(_);function Z(t,e){return K((function(n,r){var o=0;n.subscribe(Q(r,(function(n){r.next(t.call(e,n,o++))})))}))}function tt(t,e,n,r,o){void 0===r&&(r=0),void 0===o&&(o=!1);var i=e.schedule((function(){n(),o?t.add(this.schedule(null,r)):this.unsubscribe()}),r);if(t.add(i),!o)return i}function et(t,e,n){return void 0===n&&(n=1/0),c(e)?et((function(n,r){return Z((function(t,o){return e(n,t,r,o)}))($(t(n,r)))}),n):("number"==typeof e&&(n=e),K((function(e,r){return function(t,e,n,r,o,i,u,c){var s=[],l=0,a=0,f=!1,d=function(){!f||s.length||l||e.complete()},h=function(t){return l<r?p(t):s.push(t)},p=function(t){l++;var o=!1;$(n(t,a++)).subscribe(Q(e,(function(t){e.next(t)}),(function(){o=!0}),void 0,(function(){if(o)try{l--;for(;s.length&&l<r;)t=void 0,t=s.shift(),p(t);d()}catch(t){e.error(t)}var t})))};return t.subscribe(Q(e,h,(function(){f=!0,d()}))),function(){}}(e,r,t,n)})))}var nt=Array.isArray;function rt(t){return Z((function(e){return function(t,e){return nt(e)?t.apply(void 0,i([],o(e))):t(e)}(t,e)}))}var ot=["addListener","removeListener"],it=["addEventListener","removeEventListener"],ut=["on","off"];function ct(t,e,n,r){if(c(n)&&(r=n,n=void 0),r)return ct(t,e,n).pipe(rt(r));var i=o(function(t){return c(t.addEventListener)&&c(t.removeEventListener)}(t)?it.map((function(r){return function(o){return t[r](e,o,n)}})):function(t){return c(t.addListener)&&c(t.removeListener)}(t)?ot.map(st(t,e)):function(t){return c(t.on)&&c(t.off)}(t)?ut.map(st(t,e)):[],2),u=i[0],s=i[1];if(!u&&W(t))return et((function(t){return ct(t,e,n)}))($(t));if(!u)throw new TypeError("Invalid event target");return new j((function(t){var e=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return t.next(1<e.length?e:e[0])};return u(e),function(){return s(e)}}))}function st(t,e){return function(n){return function(r){return t[n](e,r)}}}function lt(t,e,n){var r=c(t)||e||n?{next:t,error:e,complete:n}:t;return r?K((function(t,e){var n;null===(n=r.subscribe)||void 0===n||n.call(r);var o=!0;t.subscribe(Q(e,(function(t){var n;null===(n=r.next)||void 0===n||n.call(r,t),e.next(t)}),(function(){var t;o=!1,null===(t=r.complete)||void 0===t||t.call(r),e.complete()}),(function(t){var n;o=!1,null===(n=r.error)||void 0===n||n.call(r,t),e.error(t)}),(function(){var t,e;o&&(null===(t=r.unsubscribe)||void 0===t||t.call(r)),null===(e=r.finalize)||void 0===e||e.call(r)})))})):P}var at,ft=Array.isArray,dt=Object.getPrototypeOf,ht=Object.prototype,pt=Object.keys;function vt(t,e){return void 0===e&&(e=0),K((function(n,r){n.subscribe(Q(r,(function(n){return tt(r,t,(function(){return r.next(n)}),e)}),(function(){return tt(r,t,(function(){return r.complete()}),e)}),(function(n){return tt(r,t,(function(){return r.error(n)}),e)})))}))}function bt(t,e){return void 0===e&&(e=0),K((function(n,r){r.add(t.schedule((function(){return n.subscribe(r)}),e))}))}function yt(t,e){if(!t)throw new Error("Iterable cannot be null");return new j((function(n){tt(n,e,(function(){var r=t[Symbol.asyncIterator]();tt(n,e,(function(){r.next().then((function(t){t.done?n.complete():n.next(t.value)}))}),0,!0)}))}))}function mt(t,e){return e?function(t,e){if(null!=t){if(q(t))return function(t,e){return $(t).pipe(bt(e),vt(e))}(t,e);if(W(t))return function(t,e){return new j((function(n){var r=0;return e.schedule((function(){r===t.length?n.complete():(n.next(t[r++]),n.closed||this.schedule())}))}))}(t,e);if(F(t))return function(t,e){return $(t).pipe(bt(e),vt(e))}(t,e);if(H(t))return yt(t,e);if(B(t))return function(t,e){return new j((function(n){var r;return tt(n,e,(function(){r=t[R](),tt(n,e,(function(){var t,e,o;try{e=(t=r.next()).value,o=t.done}catch(t){return void n.error(t)}o?n.complete():n.next(e)}),0,!0)})),function(){return c(null==r?void 0:r.return)&&r.return()}}))}(t,e);if(G(t))return function(t,e){return yt(V(t),e)}(t,e)}throw Y(t)}(t,e):$(t)}function wt(t){return t&&c(t.schedule)}function xt(t){return t[t.length-1]}function gt(t){return wt(xt(t))?t.pop():void 0}function St(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=gt(t),r=function(t){return c(xt(t))?t.pop():void 0}(t),o=function(t){if(1===t.length){var e=t[0];if(ft(e))return{args:e,keys:null};if((r=e)&&"object"==typeof r&&dt(r)===ht){var n=pt(e);return{args:n.map((function(t){return e[t]})),keys:n}}}var r;return{args:t,keys:null}}(t),i=o.args,u=o.keys;if(0===i.length)return mt([],n);var s=new j(function(t,e,n){return void 0===n&&(n=P),function(r){_t(e,(function(){for(var o=t.length,i=new Array(o),u=o,c=o,s=function(o){_t(e,(function(){var s=mt(t[o],e),l=!1;s.subscribe(Q(r,(function(t){i[o]=t,l||(l=!0,c--),c||r.next(n(i.slice()))}),(function(){--u||r.complete()})))}),r)},l=0;l<o;l++)s(l)}),r)}}(i,n,u?function(t){return function(t,e){return t.reduce((function(t,n,r){return t[n]=e[r],t}),{})}(u,t)}:P));return r?s.pipe(rt(r)):s}function _t(t,e,n){t?tt(n,t,e):e()}!function(t){t.Mouse="Mouse",t.Cheese="Cheese",t.Wall="Wall"}(at||(at={}));const Et=[[0,1],[0,-1],[1,0],[-1,0]],Ct=[];function At(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return mt(t,gt(t))}var It=function(t){function n(e,n){return t.call(this)||this}return e(n,t),n.prototype.schedule=function(t,e){return void 0===e&&(e=0),this},n}(f),Ot={setInterval:function(t,e){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var u=Ot.delegate;return(null==u?void 0:u.setInterval)?u.setInterval.apply(u,i([t,e],o(n))):setInterval.apply(void 0,i([t,e],o(n)))},clearInterval:function(t){var e=Ot.delegate;return((null==e?void 0:e.clearInterval)||clearInterval)(t)},delegate:void 0},Tt=function(t){function n(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r.pending=!1,r}return e(n,t),n.prototype.schedule=function(t,e){var n;if(void 0===e&&(e=0),this.closed)return this;this.state=t;var r=this.id,o=this.scheduler;return null!=r&&(this.id=this.recycleAsyncId(o,r,e)),this.pending=!0,this.delay=e,this.id=null!==(n=this.id)&&void 0!==n?n:this.requestAsyncId(o,this.id,e),this},n.prototype.requestAsyncId=function(t,e,n){return void 0===n&&(n=0),Ot.setInterval(t.flush.bind(t,this),n)},n.prototype.recycleAsyncId=function(t,e,n){if(void 0===n&&(n=0),null!=n&&this.delay===n&&!1===this.pending)return e;null!=e&&Ot.clearInterval(e)},n.prototype.execute=function(t,e){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var n=this._execute(t,e);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},n.prototype._execute=function(t,e){var n,r=!1;try{this.work(t)}catch(t){r=!0,n=t||new Error("Scheduled action threw falsy error")}if(r)return this.unsubscribe(),n},n.prototype.unsubscribe=function(){if(!this.closed){var e=this.id,n=this.scheduler,r=n.actions;this.work=this.state=this.scheduler=null,this.pending=!1,a(r,this),null!=e&&(this.id=this.recycleAsyncId(n,e,null)),this.delay=null,t.prototype.unsubscribe.call(this)}},n}(It),kt={now:function(){return(kt.delegate||Date).now()},delegate:void 0},Lt=function(){function t(e,n){void 0===n&&(n=t.now),this.schedulerActionCtor=e,this.now=n}return t.prototype.schedule=function(t,e,n){return void 0===e&&(e=0),new this.schedulerActionCtor(this,t).schedule(n,e)},t.now=kt.now,t}(),Pt=new(function(t){function n(e,n){void 0===n&&(n=Lt.now);var r=t.call(this,e,n)||this;return r.actions=[],r._active=!1,r}return e(n,t),n.prototype.flush=function(t){var e=this.actions;if(this._active)e.push(t);else{var n;this._active=!0;do{if(n=t.execute(t.state,t.delay))break}while(t=e.shift());if(this._active=!1,n){for(;t=e.shift();)t.unsubscribe();throw n}}},n}(Lt))(Tt),jt=Pt;function Nt(t,e){return void 0===t&&(t=0),void 0===e&&(e=Pt),t<0&&(t=0),function(t,e,n){void 0===t&&(t=0),void 0===n&&(n=jt);var r=-1;return null!=e&&(wt(e)?n=e:r=e),new j((function(e){var o,i=(o=t)instanceof Date&&!isNaN(o)?+t-n.now():t;i<0&&(i=0);var u=0;return n.schedule((function(){e.closed||(e.next(u++),0<=r?this.schedule(void 0,r):e.complete())}),i)}))}(t,t,e)}function Mt(t,e){return K((function(n,r){var o=null,i=0,u=!1,c=function(){return u&&!o&&r.complete()};n.subscribe(Q(r,(function(n){null==o||o.unsubscribe();var u=0,s=i++;$(t(n,s)).subscribe(o=Q(r,(function(t){return r.next(e?e(n,t,s,u++):t)}),(function(){o=null,c()})))}),(function(){u=!0,c()})))}))}const zt=()=>{const t=[...document.querySelectorAll(".icon")],e=document.querySelector(".start-btn"),n=new U(!1),r=new U(!1),o=new U(!0),i=[...document.querySelectorAll(".cell")],u=Array(15).fill(0).map((()=>Array(40).fill(null)));r.subscribe({next:e=>{const n=t.filter((t=>"Cheese"===t.alt))[0];n.style.opacity=e?"0.5":"1",n.style.pointerEvents=e?"none":"auto"}}),n.subscribe({next:e=>{const n=t.filter((t=>"Mouse"===t.alt))[0];n.style.opacity=e?"0.5":"1",n.style.pointerEvents=e?"none":"auto"}}),ct(i,"dragstart").pipe(lt((t=>t.preventDefault()))).subscribe(),ct(i,"contextmenu").pipe(lt((t=>{t.preventDefault();const e=t.currentTarget;e.childNodes.length&&("Cheese"===e.childNodes[0].alt?r.next(!1):"Mouse"===e.childNodes[0].alt&&n.next(!1),u[Number(e.getAttribute("x"))][Number(e.getAttribute("y"))]=null,e.innerHTML="")}))).subscribe();const c=ct(t,"dragstart").pipe(lt((()=>{o.next(!1)})),Z((t=>t.currentTarget)));ct(i,"dragover").pipe(lt((t=>t.preventDefault()))).subscribe(),St([ct(i,"drop").pipe(lt((()=>{o.next(!0)})),Z((t=>t.currentTarget))),c]).subscribe({next:([t,e])=>{if(!o.value||t.childNodes.length)return;const i=Number(t.getAttribute("x")),c=Number(t.getAttribute("y"));if("Cheese"===e.alt&&r.value||"Mouse"===e.alt&&n.value)return;"Cheese"===e.alt?(u[i][c]=at.Cheese,r.next(!0)):"Wall"===e.alt?u[i][c]=at.Wall:(u[i][c]=at.Mouse,n.next(!0));const s=document.createElement("img");s.classList.add("icon"),s.alt=e.alt,s.src=e.src,t.appendChild(s),o.next(!1)}}),ct(e,"click").subscribe({next:()=>{(t=>{let e=At([]);const n=new U(!1),r=new U([]);let o=new U([]);const i=[];for(let n=0;n<t.length;n++){i[n]=[];for(let r=0;r<t[n].length;r++)i[n][r]=[[n,r]],t[n][r]===at.Mouse&&(e=At([n,r]),t[n][r]=at.Wall)}const u=Nt(250).pipe(lt((()=>{c()}))).subscribe();n.subscribe({next:t=>{if(t){u.unsubscribe();const t=Nt(50).subscribe({next:e=>{if(e<o.value.length){const[t,n]=o.value[e];Ct[t][n].classList.add("shortest-path")}else t.unsubscribe()}})}}});const c=()=>{const u=[];var c;e.pipe(Mt((([t,e])=>{r.next(i[t][e]);const n=[];for(const[r,o]of Et){const i=t+r,u=e+o;n.push([i,u])}return mt(n)})),(c=e=>(([t,e],n)=>t>=0&&t<n.length&&e>=0&&e<n[0].length&&n[t][e]!==at.Wall)(e,t),K((function(t,e){var n=0;t.subscribe(Q(e,(function(t){return c.call(void 0,t,n++)&&e.next(t)})))}))),lt((([e,c])=>{n.value||(i[e][c]=[...r.value,[e,c]],t[e][c]===at.Cheese?(Ct[e][c].classList.add("found"),o.next(i[e][c]),n.next(!0)):(Ct[e][c].classList.add("visited"),t[e][c]=at.Wall,u.push([e,c])))}))).subscribe(),e=mt(u)}})(u)}})};function Dt(){!function(){const t=document.createElement("table");t.classList.add("sudoku-table");for(let e=0;e<9;e++){const n=document.createElement("tr");for(let t=0;t<9;t++){const r=document.createElement("input");r.type="number",r.classList.add("sudoku-cell"),r.setAttribute("x",e.toString()),r.setAttribute("y",t.toString()),n.appendChild(r)}t.appendChild(n)}document.body.appendChild(t)}();const t=[...document.querySelectorAll(".sudoku-cell")],e=new U(Array(9).fill(-1).map((()=>Array(9).fill(-1)))),n=new U(!0),r=document.createElement("h1");r.textContent="Sudoku is solvable",document.body.appendChild(r);const o=document.createElement("div");o.classList.add("solve-btn"),o.textContent="Solve",document.body.appendChild(o),ct(o,"click").pipe(Mt((()=>function(t){const e=[];let n=!0;for(let n=0;n<9;n++)for(let r=0;r<9;r++)-1===t[n][r]&&e.push([n,r]);const r=o=>{if(o>=e.length)return void(n=!1);const i=function(t,e,n){const r=new Set(Array(9).fill(0).map(((t,e)=>e+1))),o=3*Math.floor(t/3),i=3*Math.floor(e/3);for(let o=0;o<9;o++)r.delete(n[t][o]),r.delete(n[o][e]);for(let t=o;t<o+3;t++)for(let e=i;e<i+3;e++)r.delete(n[t][e]);return[...r]}(e[o][0],e[o][1],t);if(0!==i.length)for(let u=0;u<i.length;u++){let c=i[u];n&&(t[e[o][0]][e[o][1]]=c,r(o+1),n&&(t[e[o][0]][e[o][1]]=-1))}};return r(0),At(t)}(e.value))),lt((e=>{for(let n=0;n<9;n++)for(let r=0;r<9;r++)t[9*n+r].value=String(e[n][r])}))).subscribe(),ct(t,"keyup").pipe(lt((t=>{const r=t.currentTarget;let o=Number(r.value);const i=Number(r.getAttribute("x")),u=Number(r.getAttribute("y"));o<0||o>9?(r.style.border="2px solid red",n.next(!1)):r.style.border="",o=o||-1,e.value[i][u]=o,e.next(e.value)}))).subscribe(),e.subscribe({next:t=>{n.next(function(t){for(let e=0;e<9;e++){const n=new Set,r=new Set,o=new Set;for(let i=0;i<9;i++){if(-1!==t[e][i]){if(n.has(t[e][i]))return!1;n.add(t[e][i])}if(-1!==t[i][e]){if(r.has(t[i][e]))return!1;r.add(t[i][e])}const u=3*~~(e%3)+i%3,c=t[3*~~(e/3)+~~(i/3)][u];if(-1!==c){if(o.has(c))return!1;o.add(c)}}}return!0}(t))}}),n.subscribe({next:t=>{o.style.pointerEvents=t?"auto":"none",o.style.opacity=t?"1":"0.5",r.textContent="Sudoku is "+(n.value?"solvable":" not solvable")}})}const Ut=["Breadth First Search","Sudoku"],Wt=new U("");!function(){const t=document.createElement("nav");t.classList.add("navbar"),Ut.forEach(((e,n)=>{const r=document.createElement("div");r.textContent=e,r.classList.add("navbar-btn"),r.classList.add("inactive"),ct(r,"click").pipe(lt((()=>{Wt.next(r.textContent),document.body.innerHTML="",document.body.appendChild(t),"Breadth First Search"===r.textContent?function(){const t=[at.Cheese,at.Wall,at.Mouse],e=document.createElement("div");e.classList.add("start-btn"),e.textContent="Start",document.body.appendChild(e),t.forEach((t=>{const e=document.createElement("img");e.classList.add("icon"),e.src=`src/assets/images/${t.toLowerCase()}.png`,e.alt=t,document.body.appendChild(e)})),function(){const t=document.createElement("table");t.classList.add("grid-table");for(let e=0;e<15;e++){const n=document.createElement("tr");Ct[e]=[];for(let t=0;t<40;t++){const r=document.createElement("th");r.classList.add("cell"),r.setAttribute("x",e.toString()),r.setAttribute("y",t.toString()),Ct[e].push(r),n.appendChild(r)}t.appendChild(n)}document.body.appendChild(t)}(),zt()}():Dt()}))).subscribe(),t.appendChild(r)})),Wt.subscribe({next:e=>{t.childNodes.forEach((t=>{t.classList.add(e===t.textContent?"active":"inactive"),t.classList.remove(e===t.textContent?"inactive":"active")}))}}),document.body.appendChild(t)}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,